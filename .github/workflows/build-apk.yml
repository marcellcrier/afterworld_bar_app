name: Build Android APK (Flutter)

on:
  workflow_dispatch: {}   # Manuell starten Ã¼ber "Actions â†’ Run workflow"
  # push:
  #   branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      # ðŸ”§ Installiere gezielt die Platform/Build-Tools fÃ¼r compileSdk 34
      - name: Install Android platform & build-tools 34
        run: sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # flutter-version: "3.22.2"  # optional fixieren

      - name: Flutter doctor
        run: flutter doctor -v

      # Nur falls android/ im Repo fehlt (z. B. nur lib/ gepusht)
      - name: Ensure Android platform exists
        run: |
          if [ ! -d "android" ]; then
            flutter create --platforms=android .
          fi

      # LÃ¶scht den Default-Test, den "flutter create" ggf. anlegt
      - name: Remove default test (created by flutter create)
        run: |
          if [ -f test/widget_test.dart ]; then
            rm -f test/widget_test.dart
          fi

      - name: List workspace (debug)
        run: |
          ls -la
          ls -la assets || true
          ls -la assets/images || true
          ls -la assets/splash || true

      # âœ… Falls Assets im pubspec.yaml stehen, aber Ordner fehlen: anlegen
      - name: Ensure asset folders exist
        run: |
          mkdir -p assets/images assets/splash
          [ -f assets/images/.gitkeep ] || touch assets/images/.gitkeep
          [ -f assets/splash/.gitkeep ] || touch assets/splash/.gitkeep

      # Schritt A: Dependencies upgraden (fix fÃ¼r alte v1-Embedding-Plugins)
      - name: Pub upgrade (fix v1 embedding plugins) + clean
        run: |
          flutter pub upgrade --major-versions
          flutter clean

      - name: Pub get (verbose)
        run: flutter pub get -v

      # Optional-Generatoren: laufen nur, wenn die Dateien existieren
      - name: Generate launcher icon
        run: |
          if [ -f assets/icons/aw_icon.png ]; then
            dart run flutter_launcher_icons
          else
            echo "No assets/icons/aw_icon.png â€“ skipping icons"
          fi

      - name: Generate native splash
        run: |
          if [ -f assets/splash/aw_splash.png ]; then
            dart run flutter_native_splash:create
          else
            echo "No assets/splash/aw_splash.png â€“ skipping splash"
          fi

      # Analyzer: nur echte Fehler stoppen den Build
      - name: Analyze (nur echte Fehler)
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

      # Build + Log mitschreiben; bei Fehler Log als Artifact anhÃ¤ngen
      - name: Build debug APK (verbose)
        run: |
          set -o pipefail
          flutter build apk --debug -v 2>&1 | tee build_log.txt

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: build/app/outputs/flutter-apk/app-debug.apk

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build_log.txt
